server {
  location /api/ {
    proxy_http_version 1.1;
    proxy_pass http://localhost:8080/;

    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' 'origin';
      # add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      #
      # Custom headers and headers various browsers *should* be OK with but aren't
      #
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-grpc-web,x-user-agent';
      #
      # Tell client that this pre-flight info is valid for 20 days
      #
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    if ($request_method = 'POST') {
      add_header 'Access-Control-Allow-Origin' 'origin' always;
      # add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-grpc-web,x-user-agent' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }
    if ($request_method = 'GET') {
      add_header 'Access-Control-Allow-Origin' 'origin' always;
      # add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-grpc-web,x-user-agent' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    }
  }

  location / {
    proxy_set_header        Host $host;
    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto $scheme;

    access_log              {{ access_log }};
    error_log               {{ error_log }} warn;

    root                    {{ app_dir }}/client/reactjs/build;
  }

  {{ server_name }}

  listen 443 ssl;
  ssl_certificate /etc/letsencrypt/live/{{ main_domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ main_domain }}/privkey.pem;
  include /etc/letsencrypt/options-ssl-nginx.conf;
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
}

server {
  if ($scheme != "https") {
      return 301 https://$host$request_uri;
  }
  # if ($host = {{ main_domain }}) {
  #     return 301 https://$host$request_uri;
  # }

  listen 80;

  {{ server_name }}
  return 404;
}
