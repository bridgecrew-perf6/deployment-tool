- name: "Let's Encrypt: set facts"
  set_fact:
    certs_backup_dir: '/root/certs/{{ main_domain }}'
    letsencrypt_title: "Let's Encrypt"
    certbot_bin_dest: '/usr/bin/certbot'
    email: '{{ email }}'
    tar_file: '/root/letsencrypt.{{ main_domain }}.tar.xz'
    local_domain_cert_files_dir: '{{ cert_files_dir }}/{{ main_domain }}'

- name: '{{ letsencrypt_title }}: check if cert files in local host are present'
  connection: local
  delegate_to: localhost
  ansible.builtin.stat:
    path: '{{ local_domain_cert_files_dir }}'
  register: stat_result

- name: '{{ letsencrypt_title }}: check if cert files in local host are present'
  set_fact:
    cert_files_in_localhost_are_present: '{{ stat_result.stat.exists }}'

- name: '{{ letsencrypt_title }}: install packages'
  become: yes
  ansible.builtin.command:
    argv:
      - /usr/bin/snap
      - install
      - --classic
      - certbot

- name: '{{ letsencrypt_title }}: create symlink to sites-enabled dir'
  become: yes
  ansible.builtin.file:
    src: '/snap/bin/certbot'
    dest: '{{ certbot_bin_dest }}'
    state: link

- name: '{{ letsencrypt_title }}: copy archive cert files from localhost to target if present'
  become: yes
  when: not cert_files_in_target_are_present and cert_files_in_localhost_are_present
  ansible.builtin.copy:
    src: '{{ local_domain_cert_files_dir }}/archive/{{ main_domain }}'
    dest: '/etc/letsencrypt/archive/'
    local_follow: no

- name: '{{ letsencrypt_title }}: copy live cert files from localhost to target if present'
  become: yes
  when: not cert_files_in_target_are_present and cert_files_in_localhost_are_present
  ansible.builtin.copy:
    src: '{{ local_domain_cert_files_dir }}/live/{{ main_domain }}'
    dest: '/etc/letsencrypt/live/'
    local_follow: no

- name: '{{ letsencrypt_title }}: run certbot'
  become: yes
  when: not cert_files_in_target_are_present and not cert_files_in_localhost_are_present
  ansible.builtin.command:
    argv:
      - '{{ certbot_bin_dest }}'
      - certonly
      - --webroot
      - --webroot-path
      - '{{ _html_path }}'
      - --domains
      - "{{ domains | join(',') }}"
      - --non-interactive
      - --agree-tos
      - --email
      - '{{ email }}'

- name: '{{ letsencrypt_title }}: create certs backup dir'
  become: yes
  ansible.builtin.file:
    dest: '{{ certs_backup_dir }}'
    state: directory

- name: '{{ letsencrypt_title }}: backup cert files'
  become: yes
  ansible.builtin.copy:
    src: '/etc/letsencrypt/archive/{{ main_domain }}'
    dest: '{{ certs_backup_dir }}/archive'
    local_follow: no
    remote_src: yes

- name: '{{ letsencrypt_title }}: backup cert files'
  become: yes
  ansible.builtin.copy:
    src: '/etc/letsencrypt/live/{{ main_domain }}'
    dest: '{{ certs_backup_dir }}/live'
    local_follow: no
    remote_src: yes

- name: '{{ letsencrypt_title }}: create archive for fetching (at this time, Ansible can only fetch a file from remote to local)'
  become: yes
  ansible.builtin.command:
    argv:
      - tar
      - cJvf
      - '{{ tar_file }}'
      - '{{ main_domain }}'
  args:
    chdir: '{{ certs_backup_dir | dirname }}'

- name: '{{ letsencrypt_title }}: copy TLS files from remote to local host'
  become: yes
  run_once: yes
  ansible.builtin.fetch:
    src: '{{ tar_file }}'
    # !!!!IMPORTANT: relative to the playbook calling this file!!!!
    dest: '{{ secrets_dir }}/{{ main_domain }}.tar.xz'
    flat: yes

- name: '{{ letsencrypt_title }}: unset facts'
  set_fact:
    certs_backup_dir:
    letsencrypt_title:
    certbot_bin_dest:
    email:
    tar_file:
